// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	BookingsHandler
	OrdersHandler
	WorkloadsHandler
}

// BookingsHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Bookings
type BookingsHandler interface {
	// CreateBooking implements createBooking operation.
	//
	// Создает новое бронирование для указанного рабочего
	// места на заданный период времени.
	// В случае успеха возвращает созданное бронирование.
	//
	// POST /bookings
	CreateBooking(ctx context.Context, req *BookingCreate) (CreateBookingRes, error)
	// CreateBookingForAdmin implements createBookingForAdmin operation.
	//
	// Создает новое бронирование для указанного рабочего
	// места на заданный период времени.
	// В случае успеха возвращает созданное бронирование.
	//
	// POST /bookings/admin/{userId}
	CreateBookingForAdmin(ctx context.Context, req *BookingCreate, params CreateBookingForAdminParams) (CreateBookingForAdminRes, error)
	// DeleteBooking implements deleteBooking operation.
	//
	// Удаляет бронирование по его уникальному
	// идентификатору.
	//
	// DELETE /bookings/{bookingId}
	DeleteBooking(ctx context.Context, params DeleteBookingParams) (DeleteBookingRes, error)
	// GetBookingById implements getBookingById operation.
	//
	// Возвращает информацию о бронировании по его
	// уникальному идентификатору.
	//
	// GET /bookings/{bookingId}
	GetBookingById(ctx context.Context, params GetBookingByIdParams) (GetBookingByIdRes, error)
	// ListAllBookings implements listAllBookings operation.
	//
	// Возвращает список всех бронирований.
	//
	// GET /bookings
	ListAllBookings(ctx context.Context) (ListAllBookingsRes, error)
	// ListMyBookings implements listMyBookings operation.
	//
	// Возвращает список всех бронирований, созданных
	// текущим пользователем.
	//
	// GET /bookings/my
	ListMyBookings(ctx context.Context) (ListMyBookingsRes, error)
	// UpdateBooking implements updateBooking operation.
	//
	// Обновляет время начала и/или окончания бронирования.
	// В случае успеха возвращает обновленное бронирование.
	//
	// PATCH /bookings/{bookingId}
	UpdateBooking(ctx context.Context, req *BookingUpdate, params UpdateBookingParams) (UpdateBookingRes, error)
}

// OrdersHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Orders
type OrdersHandler interface {
	// CreateOrder implements createOrder operation.
	//
	// Создает новый заказ для указанного бронирования.
	// В случае успеха возвращает созданный заказ.
	//
	// POST /bookings/{bookingId}/orders
	CreateOrder(ctx context.Context, req *OrderCreate, params CreateOrderParams) (CreateOrderRes, error)
	// DeleteOrders implements deleteOrders operation.
	//
	// Удаляет заказ по его уникальному идентификатору.
	//
	// DELETE /bookings/{bookingId}/orders/{orderId}
	DeleteOrders(ctx context.Context, params DeleteOrdersParams) (DeleteOrdersRes, error)
	// ListOrders implements listOrders operation.
	//
	// Возвращает список всех заказов для указанного
	// бронирования.
	//
	// GET /bookings/{bookingId}/orders
	ListOrders(ctx context.Context, params ListOrdersParams) (ListOrdersRes, error)
}

// WorkloadsHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Workloads
type WorkloadsHandler interface {
	// GetFloorWorkload implements getFloorWorkload operation.
	//
	// Возвращает информацию о нагрузке на указанный этаж
	// за указанный период времени.
	//
	// GET /workloads/floors/{floorId}
	GetFloorWorkload(ctx context.Context, params GetFloorWorkloadParams) (GetFloorWorkloadRes, error)
	// GetWorkload implements getWorkload operation.
	//
	// Возвращает информацию о нагрузке на указанное
	// рабочее место за указанный период времени.
	//
	// GET /workloads/{entityId}
	GetWorkload(ctx context.Context, params GetWorkloadParams) (GetWorkloadRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
