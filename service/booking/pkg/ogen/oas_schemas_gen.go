// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/Booking
type Booking struct {
	// Уникальный идентификатор бронирования.
	ID uuid.UUID `json:"id"`
	// Уникальный идентификатор рабочего места.
	EntityID uuid.UUID `json:"entity_id"`
	// Уникальный идентификатор пользователя, создавшего
	// бронирование.
	UserID uuid.UUID `json:"user_id"`
	// Время начала бронирования (в секундах, Unix timestamp).
	TimeFrom Time `json:"time_from"`
	// Время окончания бронирования (в секундах, Unix timestamp).
	TimeTo Time `json:"time_to"`
	// Время создания бронирования (в секундах, Unix timestamp).
	CreatedAt Time `json:"created_at"`
	// Время последнего обновления бронирования (в секундах,
	//  Unix timestamp).
	UpdatedAt Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Booking) GetID() uuid.UUID {
	return s.ID
}

// GetEntityID returns the value of EntityID.
func (s *Booking) GetEntityID() uuid.UUID {
	return s.EntityID
}

// GetUserID returns the value of UserID.
func (s *Booking) GetUserID() uuid.UUID {
	return s.UserID
}

// GetTimeFrom returns the value of TimeFrom.
func (s *Booking) GetTimeFrom() Time {
	return s.TimeFrom
}

// GetTimeTo returns the value of TimeTo.
func (s *Booking) GetTimeTo() Time {
	return s.TimeTo
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Booking) GetCreatedAt() Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Booking) GetUpdatedAt() Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Booking) SetID(val uuid.UUID) {
	s.ID = val
}

// SetEntityID sets the value of EntityID.
func (s *Booking) SetEntityID(val uuid.UUID) {
	s.EntityID = val
}

// SetUserID sets the value of UserID.
func (s *Booking) SetUserID(val uuid.UUID) {
	s.UserID = val
}

// SetTimeFrom sets the value of TimeFrom.
func (s *Booking) SetTimeFrom(val Time) {
	s.TimeFrom = val
}

// SetTimeTo sets the value of TimeTo.
func (s *Booking) SetTimeTo(val Time) {
	s.TimeTo = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Booking) SetCreatedAt(val Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Booking) SetUpdatedAt(val Time) {
	s.UpdatedAt = val
}

func (*Booking) createBookingForAdminRes() {}
func (*Booking) createBookingRes()         {}
func (*Booking) updateBookingRes()         {}

// Ref: #/components/schemas/BookingCreate
type BookingCreate struct {
	// Уникальный идентификатор рабочего места.
	EntityID uuid.UUID `json:"entity_id"`
	// Время начала бронирования (в секундах, Unix timestamp).
	TimeFrom Time `json:"time_from"`
	// Время окончания бронирования (в секундах, Unix timestamp).
	TimeTo Time `json:"time_to"`
}

// GetEntityID returns the value of EntityID.
func (s *BookingCreate) GetEntityID() uuid.UUID {
	return s.EntityID
}

// GetTimeFrom returns the value of TimeFrom.
func (s *BookingCreate) GetTimeFrom() Time {
	return s.TimeFrom
}

// GetTimeTo returns the value of TimeTo.
func (s *BookingCreate) GetTimeTo() Time {
	return s.TimeTo
}

// SetEntityID sets the value of EntityID.
func (s *BookingCreate) SetEntityID(val uuid.UUID) {
	s.EntityID = val
}

// SetTimeFrom sets the value of TimeFrom.
func (s *BookingCreate) SetTimeFrom(val Time) {
	s.TimeFrom = val
}

// SetTimeTo sets the value of TimeTo.
func (s *BookingCreate) SetTimeTo(val Time) {
	s.TimeTo = val
}

// Ref: #/components/schemas/BookingEntity
type BookingEntity struct {
	ID        uuid.UUID         `json:"id"`
	Type      BookingEntityType `json:"type"`
	Title     string            `json:"title"`
	X         int               `json:"x"`
	Y         int               `json:"y"`
	FloorID   uuid.UUID         `json:"floor_id"`
	Width     int               `json:"width"`
	Height    int               `json:"height"`
	Capacity  int               `json:"capacity"`
	CreatedAt Time              `json:"created_at"`
	UpdatedAt Time              `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *BookingEntity) GetID() uuid.UUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *BookingEntity) GetType() BookingEntityType {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *BookingEntity) GetTitle() string {
	return s.Title
}

// GetX returns the value of X.
func (s *BookingEntity) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *BookingEntity) GetY() int {
	return s.Y
}

// GetFloorID returns the value of FloorID.
func (s *BookingEntity) GetFloorID() uuid.UUID {
	return s.FloorID
}

// GetWidth returns the value of Width.
func (s *BookingEntity) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *BookingEntity) GetHeight() int {
	return s.Height
}

// GetCapacity returns the value of Capacity.
func (s *BookingEntity) GetCapacity() int {
	return s.Capacity
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BookingEntity) GetCreatedAt() Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BookingEntity) GetUpdatedAt() Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *BookingEntity) SetID(val uuid.UUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *BookingEntity) SetType(val BookingEntityType) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *BookingEntity) SetTitle(val string) {
	s.Title = val
}

// SetX sets the value of X.
func (s *BookingEntity) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *BookingEntity) SetY(val int) {
	s.Y = val
}

// SetFloorID sets the value of FloorID.
func (s *BookingEntity) SetFloorID(val uuid.UUID) {
	s.FloorID = val
}

// SetWidth sets the value of Width.
func (s *BookingEntity) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *BookingEntity) SetHeight(val int) {
	s.Height = val
}

// SetCapacity sets the value of Capacity.
func (s *BookingEntity) SetCapacity(val int) {
	s.Capacity = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BookingEntity) SetCreatedAt(val Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BookingEntity) SetUpdatedAt(val Time) {
	s.UpdatedAt = val
}

type BookingEntityType string

const (
	BookingEntityTypeROOM      BookingEntityType = "ROOM"
	BookingEntityTypeOPENSPACE BookingEntityType = "OPEN_SPACE"
)

// AllValues returns all BookingEntityType values.
func (BookingEntityType) AllValues() []BookingEntityType {
	return []BookingEntityType{
		BookingEntityTypeROOM,
		BookingEntityTypeOPENSPACE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BookingEntityType) MarshalText() ([]byte, error) {
	switch s {
	case BookingEntityTypeROOM:
		return []byte(s), nil
	case BookingEntityTypeOPENSPACE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BookingEntityType) UnmarshalText(data []byte) error {
	switch BookingEntityType(data) {
	case BookingEntityTypeROOM:
		*s = BookingEntityTypeROOM
		return nil
	case BookingEntityTypeOPENSPACE:
		*s = BookingEntityTypeOPENSPACE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BookingInfo
type BookingInfo struct {
	// Уникальный идентификатор бронирования.
	ID     uuid.UUID     `json:"id"`
	Entity BookingEntity `json:"entity"`
	// Информация о пользователе, создавшем бронирование.
	User User `json:"user"`
	// Время начала бронирования (в секундах, Unix timestamp).
	TimeFrom Time `json:"time_from"`
	// Время окончания бронирования (в секундах, Unix timestamp).
	TimeTo Time `json:"time_to"`
	// Список заказов, связанных с бронированием.
	Orders []Order `json:"orders"`
	// Время создания бронирования (в секундах, Unix timestamp).
	CreatedAt Time `json:"created_at"`
	// Время последнего обновления бронирования (в секундах,
	//  Unix timestamp).
	UpdatedAt Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *BookingInfo) GetID() uuid.UUID {
	return s.ID
}

// GetEntity returns the value of Entity.
func (s *BookingInfo) GetEntity() BookingEntity {
	return s.Entity
}

// GetUser returns the value of User.
func (s *BookingInfo) GetUser() User {
	return s.User
}

// GetTimeFrom returns the value of TimeFrom.
func (s *BookingInfo) GetTimeFrom() Time {
	return s.TimeFrom
}

// GetTimeTo returns the value of TimeTo.
func (s *BookingInfo) GetTimeTo() Time {
	return s.TimeTo
}

// GetOrders returns the value of Orders.
func (s *BookingInfo) GetOrders() []Order {
	return s.Orders
}

// GetCreatedAt returns the value of CreatedAt.
func (s *BookingInfo) GetCreatedAt() Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *BookingInfo) GetUpdatedAt() Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *BookingInfo) SetID(val uuid.UUID) {
	s.ID = val
}

// SetEntity sets the value of Entity.
func (s *BookingInfo) SetEntity(val BookingEntity) {
	s.Entity = val
}

// SetUser sets the value of User.
func (s *BookingInfo) SetUser(val User) {
	s.User = val
}

// SetTimeFrom sets the value of TimeFrom.
func (s *BookingInfo) SetTimeFrom(val Time) {
	s.TimeFrom = val
}

// SetTimeTo sets the value of TimeTo.
func (s *BookingInfo) SetTimeTo(val Time) {
	s.TimeTo = val
}

// SetOrders sets the value of Orders.
func (s *BookingInfo) SetOrders(val []Order) {
	s.Orders = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *BookingInfo) SetCreatedAt(val Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *BookingInfo) SetUpdatedAt(val Time) {
	s.UpdatedAt = val
}

func (*BookingInfo) getBookingByIdRes() {}

// Ref: #/components/schemas/BookingUpdate
type BookingUpdate struct {
	// Новое время начала бронирования (в секундах, Unix timestamp).
	TimeFrom OptTime `json:"time_from"`
	// Новое время окончания бронирования (в секундах, Unix
	// timestamp).
	TimeTo OptTime `json:"time_to"`
}

// GetTimeFrom returns the value of TimeFrom.
func (s *BookingUpdate) GetTimeFrom() OptTime {
	return s.TimeFrom
}

// GetTimeTo returns the value of TimeTo.
func (s *BookingUpdate) GetTimeTo() OptTime {
	return s.TimeTo
}

// SetTimeFrom sets the value of TimeFrom.
func (s *BookingUpdate) SetTimeFrom(val OptTime) {
	s.TimeFrom = val
}

// SetTimeTo sets the value of TimeTo.
func (s *BookingUpdate) SetTimeTo(val OptTime) {
	s.TimeTo = val
}

// CreateBookingConflict is response for CreateBooking operation.
type CreateBookingConflict struct{}

func (*CreateBookingConflict) createBookingRes() {}

// CreateBookingForAdminConflict is response for CreateBookingForAdmin operation.
type CreateBookingForAdminConflict struct{}

func (*CreateBookingForAdminConflict) createBookingForAdminRes() {}

// CreateBookingForAdminForbidden is response for CreateBookingForAdmin operation.
type CreateBookingForAdminForbidden struct{}

func (*CreateBookingForAdminForbidden) createBookingForAdminRes() {}

// CreateBookingForbidden is response for CreateBooking operation.
type CreateBookingForbidden struct{}

func (*CreateBookingForbidden) createBookingRes() {}

// DeleteBookingNoContent is response for DeleteBooking operation.
type DeleteBookingNoContent struct{}

func (*DeleteBookingNoContent) deleteBookingRes() {}

// DeleteOrdersNoContent is response for DeleteOrders operation.
type DeleteOrdersNoContent struct{}

func (*DeleteOrdersNoContent) deleteOrdersRes() {}

type FloorWorkload []FloorWorkloadItem

func (*FloorWorkload) getFloorWorkloadRes() {}

type FloorWorkloadItem struct {
	Entity BookingEntity `json:"entity"`
	// Флаг, указывающий, свободно ли рабочее место в
	// указанное время.
	IsFree bool `json:"is_free"`
}

// GetEntity returns the value of Entity.
func (s *FloorWorkloadItem) GetEntity() BookingEntity {
	return s.Entity
}

// GetIsFree returns the value of IsFree.
func (s *FloorWorkloadItem) GetIsFree() bool {
	return s.IsFree
}

// SetEntity sets the value of Entity.
func (s *FloorWorkloadItem) SetEntity(val BookingEntity) {
	s.Entity = val
}

// SetIsFree sets the value of IsFree.
func (s *FloorWorkloadItem) SetIsFree(val bool) {
	s.IsFree = val
}

// ListAllBookingsForbidden is response for ListAllBookings operation.
type ListAllBookingsForbidden struct{}

func (*ListAllBookingsForbidden) listAllBookingsRes() {}

type ListAllBookingsOKApplicationJSON []BookingInfo

func (*ListAllBookingsOKApplicationJSON) listAllBookingsRes() {}

type ListMyBookingsOKApplicationJSON []BookingInfo

func (*ListMyBookingsOKApplicationJSON) listMyBookingsRes() {}

type ListOrdersOKApplicationJSON []Order

func (*ListOrdersOKApplicationJSON) listOrdersRes() {}

// NewOptResponse404Resource returns new OptResponse404Resource with value set to v.
func NewOptResponse404Resource(v Response404Resource) OptResponse404Resource {
	return OptResponse404Resource{
		Value: v,
		Set:   true,
	}
}

// OptResponse404Resource is optional Response404Resource.
type OptResponse404Resource struct {
	Value Response404Resource
	Set   bool
}

// IsSet returns true if OptResponse404Resource was set.
func (o OptResponse404Resource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponse404Resource) Reset() {
	var v Response404Resource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponse404Resource) SetTo(v Response404Resource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponse404Resource) Get() (v Response404Resource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponse404Resource) Or(d Response404Resource) Response404Resource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTime returns new OptTime with value set to v.
func NewOptTime(v Time) OptTime {
	return OptTime{
		Value: v,
		Set:   true,
	}
}

// OptTime is optional Time.
type OptTime struct {
	Value Time
	Set   bool
}

// IsSet returns true if OptTime was set.
func (o OptTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTime) Reset() {
	var v Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTime) SetTo(v Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTime) Get() (v Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTime) Or(d Time) Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Order
type Order struct {
	// Уникальный идентификатор заказа.
	ID uuid.UUID `json:"id"`
	// Уникальный идентификатор бронирования, к которому
	// относится заказ.
	BookingID uuid.UUID `json:"booking_id"`
	// Флаг, указывающий, выполнен ли заказ.
	Completed bool `json:"completed"`
	// Заказ.
	Thing OrderThingEnum `json:"thing"`
	// Время создания заказа (в секундах, Unix timestamp).
	CreatedAt Time `json:"created_at"`
	// Время последнего обновления заказа (в секундах, Unix
	// timestamp).
	UpdatedAt Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Order) GetID() uuid.UUID {
	return s.ID
}

// GetBookingID returns the value of BookingID.
func (s *Order) GetBookingID() uuid.UUID {
	return s.BookingID
}

// GetCompleted returns the value of Completed.
func (s *Order) GetCompleted() bool {
	return s.Completed
}

// GetThing returns the value of Thing.
func (s *Order) GetThing() OrderThingEnum {
	return s.Thing
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Order) GetCreatedAt() Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Order) GetUpdatedAt() Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Order) SetID(val uuid.UUID) {
	s.ID = val
}

// SetBookingID sets the value of BookingID.
func (s *Order) SetBookingID(val uuid.UUID) {
	s.BookingID = val
}

// SetCompleted sets the value of Completed.
func (s *Order) SetCompleted(val bool) {
	s.Completed = val
}

// SetThing sets the value of Thing.
func (s *Order) SetThing(val OrderThingEnum) {
	s.Thing = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Order) SetCreatedAt(val Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Order) SetUpdatedAt(val Time) {
	s.UpdatedAt = val
}

func (*Order) createOrderRes() {}

// Ref: #/components/schemas/OrderCreate
type OrderCreate struct {
	// Заказ.
	Thing OrderThingEnum `json:"thing"`
}

// GetThing returns the value of Thing.
func (s *OrderCreate) GetThing() OrderThingEnum {
	return s.Thing
}

// SetThing sets the value of Thing.
func (s *OrderCreate) SetThing(val OrderThingEnum) {
	s.Thing = val
}

// Заказ.
// Ref: #/components/schemas/OrderThingEnum
type OrderThingEnum string

const (
	OrderThingEnumLaptop OrderThingEnum = "laptop"
	OrderThingEnumEboard OrderThingEnum = "eboard"
	OrderThingEnumCoffee OrderThingEnum = "coffee"
)

// AllValues returns all OrderThingEnum values.
func (OrderThingEnum) AllValues() []OrderThingEnum {
	return []OrderThingEnum{
		OrderThingEnumLaptop,
		OrderThingEnumEboard,
		OrderThingEnumCoffee,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderThingEnum) MarshalText() ([]byte, error) {
	switch s {
	case OrderThingEnumLaptop:
		return []byte(s), nil
	case OrderThingEnumEboard:
		return []byte(s), nil
	case OrderThingEnumCoffee:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderThingEnum) UnmarshalText(data []byte) error {
	switch OrderThingEnum(data) {
	case OrderThingEnumLaptop:
		*s = OrderThingEnumLaptop
		return nil
	case OrderThingEnumEboard:
		*s = OrderThingEnumEboard
		return nil
	case OrderThingEnumCoffee:
		*s = OrderThingEnumCoffee
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Response400 struct {
	// Сообщение об ошибке.
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Response400) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Response400) SetMessage(val OptString) {
	s.Message = val
}

func (*Response400) createBookingForAdminRes() {}
func (*Response400) createBookingRes()         {}
func (*Response400) createOrderRes()           {}
func (*Response400) deleteBookingRes()         {}
func (*Response400) deleteOrdersRes()          {}
func (*Response400) getBookingByIdRes()        {}
func (*Response400) getFloorWorkloadRes()      {}
func (*Response400) getWorkloadRes()           {}
func (*Response400) listOrdersRes()            {}
func (*Response400) updateBookingRes()         {}

// Ref: #/components/responses/Response401
type Response401 struct{}

func (*Response401) createBookingForAdminRes() {}
func (*Response401) createBookingRes()         {}
func (*Response401) createOrderRes()           {}
func (*Response401) deleteBookingRes()         {}
func (*Response401) deleteOrdersRes()          {}
func (*Response401) getBookingByIdRes()        {}
func (*Response401) getFloorWorkloadRes()      {}
func (*Response401) getWorkloadRes()           {}
func (*Response401) listAllBookingsRes()       {}
func (*Response401) listMyBookingsRes()        {}
func (*Response401) listOrdersRes()            {}
func (*Response401) updateBookingRes()         {}

type Response404 struct {
	// Тип ресурса, который не был найден.
	Resource OptResponse404Resource `json:"resource"`
}

// GetResource returns the value of Resource.
func (s *Response404) GetResource() OptResponse404Resource {
	return s.Resource
}

// SetResource sets the value of Resource.
func (s *Response404) SetResource(val OptResponse404Resource) {
	s.Resource = val
}

func (*Response404) createBookingForAdminRes() {}
func (*Response404) createBookingRes()         {}
func (*Response404) createOrderRes()           {}
func (*Response404) deleteBookingRes()         {}
func (*Response404) deleteOrdersRes()          {}
func (*Response404) getBookingByIdRes()        {}
func (*Response404) getFloorWorkloadRes()      {}
func (*Response404) getWorkloadRes()           {}
func (*Response404) listOrdersRes()            {}
func (*Response404) updateBookingRes()         {}

// Тип ресурса, который не был найден.
type Response404Resource string

const (
	Response404ResourceFloor         Response404Resource = "Floor"
	Response404ResourceBookingEntity Response404Resource = "BookingEntity"
	Response404ResourceBooking       Response404Resource = "Booking"
	Response404ResourceOrder         Response404Resource = "Order"
	Response404ResourceGuest         Response404Resource = "Guest"
)

// AllValues returns all Response404Resource values.
func (Response404Resource) AllValues() []Response404Resource {
	return []Response404Resource{
		Response404ResourceFloor,
		Response404ResourceBookingEntity,
		Response404ResourceBooking,
		Response404ResourceOrder,
		Response404ResourceGuest,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Response404Resource) MarshalText() ([]byte, error) {
	switch s {
	case Response404ResourceFloor:
		return []byte(s), nil
	case Response404ResourceBookingEntity:
		return []byte(s), nil
	case Response404ResourceBooking:
		return []byte(s), nil
	case Response404ResourceOrder:
		return []byte(s), nil
	case Response404ResourceGuest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Response404Resource) UnmarshalText(data []byte) error {
	switch Response404Resource(data) {
	case Response404ResourceFloor:
		*s = Response404ResourceFloor
		return nil
	case Response404ResourceBookingEntity:
		*s = Response404ResourceBookingEntity
		return nil
	case Response404ResourceBooking:
		*s = Response404ResourceBooking
		return nil
	case Response404ResourceOrder:
		*s = Response404ResourceOrder
		return nil
	case Response404ResourceGuest:
		*s = Response404ResourceGuest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Time int64

// UpdateBookingConflict is response for UpdateBooking operation.
type UpdateBookingConflict struct{}

func (*UpdateBookingConflict) updateBookingRes() {}

// UpdateBookingForbidden is response for UpdateBooking operation.
type UpdateBookingForbidden struct{}

func (*UpdateBookingForbidden) updateBookingRes() {}

// Ref: #/components/schemas/User
type User struct {
	// Уникальный идентификатор пользователя.
	ID uuid.UUID `json:"id"`
	// Электронная почта пользователя.
	Email string `json:"email"`
	// Имя пользователя.
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *User) GetID() uuid.UUID {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *User) SetID(val uuid.UUID) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

type Workload []WorkloadItem

func (*Workload) getWorkloadRes() {}

type WorkloadItem struct {
	// Временная метка (в секундах, Unix timestamp).
	Time Time `json:"time"`
	// Флаг, указывающий, свободно ли рабочее место в
	// указанное время.
	IsFree bool `json:"is_free"`
}

// GetTime returns the value of Time.
func (s *WorkloadItem) GetTime() Time {
	return s.Time
}

// GetIsFree returns the value of IsFree.
func (s *WorkloadItem) GetIsFree() bool {
	return s.IsFree
}

// SetTime sets the value of Time.
func (s *WorkloadItem) SetTime(val Time) {
	s.Time = val
}

// SetIsFree sets the value of IsFree.
func (s *WorkloadItem) SetIsFree(val bool) {
	s.IsFree = val
}
