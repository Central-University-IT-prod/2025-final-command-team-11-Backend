// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CreateBookingForAdminParams is parameters of createBookingForAdmin operation.
type CreateBookingForAdminParams struct {
	// ID юзера.
	UserId uuid.UUID
}

func unpackCreateBookingForAdminParams(packed middleware.Parameters) (params CreateBookingForAdminParams) {
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateBookingForAdminParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateBookingForAdminParams, _ error) {
	// Decode path: userId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateOrderParams is parameters of createOrder operation.
type CreateOrderParams struct {
	// ID бронирования.
	BookingId uuid.UUID
}

func unpackCreateOrderParams(packed middleware.Parameters) (params CreateOrderParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingId",
			In:   "path",
		}
		params.BookingId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateOrderParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateOrderParams, _ error) {
	// Decode path: bookingId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.BookingId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteBookingParams is parameters of deleteBooking operation.
type DeleteBookingParams struct {
	// ID бронирования.
	BookingId uuid.UUID
}

func unpackDeleteBookingParams(packed middleware.Parameters) (params DeleteBookingParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingId",
			In:   "path",
		}
		params.BookingId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteBookingParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteBookingParams, _ error) {
	// Decode path: bookingId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.BookingId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteOrdersParams is parameters of deleteOrders operation.
type DeleteOrdersParams struct {
	// ID бронирования.
	BookingId uuid.UUID
	// ID заказа.
	OrderId uuid.UUID
}

func unpackDeleteOrdersParams(packed middleware.Parameters) (params DeleteOrdersParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingId",
			In:   "path",
		}
		params.BookingId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "orderId",
			In:   "path",
		}
		params.OrderId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteOrdersParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteOrdersParams, _ error) {
	// Decode path: bookingId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.BookingId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: orderId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "orderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.OrderId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "orderId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetBookingByIdParams is parameters of getBookingById operation.
type GetBookingByIdParams struct {
	// ID бронирования.
	BookingId uuid.UUID
}

func unpackGetBookingByIdParams(packed middleware.Parameters) (params GetBookingByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingId",
			In:   "path",
		}
		params.BookingId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetBookingByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBookingByIdParams, _ error) {
	// Decode path: bookingId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.BookingId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetFloorWorkloadParams is parameters of getFloorWorkload operation.
type GetFloorWorkloadParams struct {
	// ID этажа.
	FloorId uuid.UUID
	// Время начала периода (в секундах, Unix timestamp).
	TimeFrom Time
	// Время окончания периода (в секундах, Unix timestamp).
	TimeTo Time
}

func unpackGetFloorWorkloadParams(packed middleware.Parameters) (params GetFloorWorkloadParams) {
	{
		key := middleware.ParameterKey{
			Name: "floorId",
			In:   "path",
		}
		params.FloorId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "timeFrom",
			In:   "query",
		}
		params.TimeFrom = packed[key].(Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "timeTo",
			In:   "query",
		}
		params.TimeTo = packed[key].(Time)
	}
	return params
}

func decodeGetFloorWorkloadParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFloorWorkloadParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: floorId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "floorId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.FloorId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "floorId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: timeFrom.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeFrom",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeFromVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotTimeFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeFrom = Time(paramsDotTimeFromVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "timeFrom",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: timeTo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeTo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeToVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotTimeToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeTo = Time(paramsDotTimeToVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "timeTo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWorkloadParams is parameters of getWorkload operation.
type GetWorkloadParams struct {
	// ID рабочего места.
	EntityId uuid.UUID
	// Время начала периода (в секундах, Unix timestamp).
	TimeFrom Time
	// Время окончания периода (в секундах, Unix timestamp).
	TimeTo Time
}

func unpackGetWorkloadParams(packed middleware.Parameters) (params GetWorkloadParams) {
	{
		key := middleware.ParameterKey{
			Name: "entityId",
			In:   "path",
		}
		params.EntityId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "timeFrom",
			In:   "query",
		}
		params.TimeFrom = packed[key].(Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "timeTo",
			In:   "query",
		}
		params.TimeTo = packed[key].(Time)
	}
	return params
}

func decodeGetWorkloadParams(args [1]string, argsEscaped bool, r *http.Request) (params GetWorkloadParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: entityId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "entityId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.EntityId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entityId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: timeFrom.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeFrom",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeFromVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotTimeFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeFrom = Time(paramsDotTimeFromVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "timeFrom",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: timeTo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "timeTo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTimeToVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotTimeToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TimeTo = Time(paramsDotTimeToVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "timeTo",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListOrdersParams is parameters of listOrders operation.
type ListOrdersParams struct {
	// ID бронирования.
	BookingId uuid.UUID
}

func unpackListOrdersParams(packed middleware.Parameters) (params ListOrdersParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingId",
			In:   "path",
		}
		params.BookingId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListOrdersParams(args [1]string, argsEscaped bool, r *http.Request) (params ListOrdersParams, _ error) {
	// Decode path: bookingId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.BookingId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateBookingParams is parameters of updateBooking operation.
type UpdateBookingParams struct {
	// ID бронирования.
	BookingId uuid.UUID
}

func unpackUpdateBookingParams(packed middleware.Parameters) (params UpdateBookingParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingId",
			In:   "path",
		}
		params.BookingId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateBookingParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateBookingParams, _ error) {
	// Decode path: bookingId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.BookingId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
